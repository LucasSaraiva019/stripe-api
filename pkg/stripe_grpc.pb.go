// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stripe.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StripeClient is the client API for Stripe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StripeClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
}

type stripeClient struct {
	cc grpc.ClientConnInterface
}

func NewStripeClient(cc grpc.ClientConnInterface) StripeClient {
	return &stripeClient{cc}
}

func (c *stripeClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/stripe_api.v1.Stripe/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StripeServer is the server API for Stripe service.
// All implementations must embed UnimplementedStripeServer
// for forward compatibility
type StripeServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	mustEmbedUnimplementedStripeServer()
}

// UnimplementedStripeServer must be embedded to have forward compatible implementations.
type UnimplementedStripeServer struct {
}

func (UnimplementedStripeServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedStripeServer) mustEmbedUnimplementedStripeServer() {}

// UnsafeStripeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StripeServer will
// result in compilation errors.
type UnsafeStripeServer interface {
	mustEmbedUnimplementedStripeServer()
}

func RegisterStripeServer(s grpc.ServiceRegistrar, srv StripeServer) {
	s.RegisterService(&Stripe_ServiceDesc, srv)
}

func _Stripe_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stripe_api.v1.Stripe/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stripe_ServiceDesc is the grpc.ServiceDesc for Stripe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stripe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stripe_api.v1.Stripe",
	HandlerType: (*StripeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _Stripe_CreateProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stripe.proto",
}
